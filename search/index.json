[{"content":"下面是我弄的思维导图 大致图片 json 这个可以在菜鸟工具上看到 在线思维导图(创建json文件,然后再复制下面的,在该网站导入json文件即可)\n1 {\u0026#34;root\u0026#34;:{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtfin28kg0\u0026#34;,\u0026#34;created\u0026#34;:1717055655662,\u0026#34;text\u0026#34;:\u0026#34;操作系统\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtikgl32w0\u0026#34;,\u0026#34;created\u0026#34;:1717055894717,\u0026#34;text\u0026#34;:\u0026#34;计算机系统概述\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;,\u0026#34;layout_bottom_offset\u0026#34;:{\u0026#34;x\u0026#34;:-50.0000234842297,\u0026#34;y\u0026#34;:27.499998621642987}},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtle0xqow0\u0026#34;,\u0026#34;created\u0026#34;:1717056115802,\u0026#34;text\u0026#34;:\u0026#34;操作系统的基本概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtmg261eg0\u0026#34;,\u0026#34;created\u0026#34;:1717056198594,\u0026#34;text\u0026#34;:\u0026#34;操作系统的特怔\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mto55h7cg0\u0026#34;,\u0026#34;created\u0026#34;:1717056331578,\u0026#34;text\u0026#34;:\u0026#34;并发\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mto68ribs0\u0026#34;,\u0026#34;created\u0026#34;:1717056333954,\u0026#34;text\u0026#34;:\u0026#34;共享\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mto7aqv000\u0026#34;,\u0026#34;created\u0026#34;:1717056336250,\u0026#34;text\u0026#34;:\u0026#34;虚拟\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mto875mpk0\u0026#34;,\u0026#34;created\u0026#34;:1717056338210,\u0026#34;text\u0026#34;:\u0026#34;异步\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtmgze06o0\u0026#34;,\u0026#34;created\u0026#34;:1717056200603,\u0026#34;text\u0026#34;:\u0026#34;操作系统的目标和功能\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtr270l400\u0026#34;,\u0026#34;created\u0026#34;:1717056560233,\u0026#34;text\u0026#34;:\u0026#34;计算机资源的管理者\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtrktsxbk0\u0026#34;,\u0026#34;created\u0026#34;:1717056600793,\u0026#34;text\u0026#34;:\u0026#34;处理机\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtrpewyfk0\u0026#34;,\u0026#34;created\u0026#34;:1717056610777,\u0026#34;text\u0026#34;:\u0026#34;存储器\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mts8lpj740\u0026#34;,\u0026#34;created\u0026#34;:1717056652547,\u0026#34;text\u0026#34;:\u0026#34;文件\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtsd33b8g0\u0026#34;,\u0026#34;created\u0026#34;:1717056662305,\u0026#34;text\u0026#34;:\u0026#34;设备\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtrbo3bs00\u0026#34;,\u0026#34;created\u0026#34;:1717056580857,\u0026#34;text\u0026#34;:\u0026#34;用户与计算机的接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtuavjtds0\u0026#34;,\u0026#34;created\u0026#34;:1717056814224,\u0026#34;text\u0026#34;:\u0026#34;命令接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtve7wp280\u0026#34;,\u0026#34;created\u0026#34;:1717056899865,\u0026#34;text\u0026#34;:\u0026#34;联机命令接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtw6ps09k0\u0026#34;,\u0026#34;created\u0026#34;:1717056961896,\u0026#34;text\u0026#34;:\u0026#34;一条命令一条作业\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtvpkbtgw0\u0026#34;,\u0026#34;created\u0026#34;:1717056924561,\u0026#34;text\u0026#34;:\u0026#34;脱机命令接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtwpj2ahs0\u0026#34;,\u0026#34;created\u0026#34;:1717057002849,\u0026#34;text\u0026#34;:\u0026#34;多条命令多条作业\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtushp87s0\u0026#34;,\u0026#34;created\u0026#34;:1717056852568,\u0026#34;text\u0026#34;:\u0026#34;程序接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtx0dh1u80\u0026#34;,\u0026#34;created\u0026#34;:1717057026455,\u0026#34;text\u0026#34;:\u0026#34;gui接口\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtxrpya200\u0026#34;,\u0026#34;created\u0026#34;:1717057085983,\u0026#34;text\u0026#34;:\u0026#34;操作系统发展历程\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mty5enjjc0\u0026#34;,\u0026#34;created\u0026#34;:1717057115775,\u0026#34;text\u0026#34;:\u0026#34;手工操作系统\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mty68tgtc0\u0026#34;,\u0026#34;created\u0026#34;:1717057117599,\u0026#34;text\u0026#34;:\u0026#34;批处理系统\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mu0awpr2o0\u0026#34;,\u0026#34;created\u0026#34;:1717057284479,\u0026#34;text\u0026#34;:\u0026#34;单道批处理系统\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mu0btwuhc0\u0026#34;,\u0026#34;created\u0026#34;:1717057286486,\u0026#34;text\u0026#34;:\u0026#34;多道批处理系统\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mty70ly3k0\u0026#34;,\u0026#34;created\u0026#34;:1717057119279,\u0026#34;text\u0026#34;:\u0026#34;分时操作系统\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mty7yc8zk0\u0026#34;,\u0026#34;created\u0026#34;:1717057121319,\u0026#34;text\u0026#34;:\u0026#34;实时操作系统\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mty8r1xfc0\u0026#34;,\u0026#34;created\u0026#34;:1717057123055,\u0026#34;text\u0026#34;:\u0026#34;网络操作系统和分步式计算机系统\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mu3wtfbsg0\u0026#34;,\u0026#34;created\u0026#34;:1717057567262,\u0026#34;text\u0026#34;:\u0026#34;个人操作系统\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mu81h0m0o0\u0026#34;,\u0026#34;created\u0026#34;:1717057890852,\u0026#34;text\u0026#34;:\u0026#34;操作系统的运行环境\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mu8hukjew0\u0026#34;,\u0026#34;created\u0026#34;:1717057926500,\u0026#34;text\u0026#34;:\u0026#34;内核态\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mua5d0f5s0\u0026#34;,\u0026#34;created\u0026#34;:1717058056045,\u0026#34;text\u0026#34;:\u0026#34;时钟管理\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mua67ojgg0\u0026#34;,\u0026#34;created\u0026#34;:1717058057900,\u0026#34;text\u0026#34;:\u0026#34;中断机制\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mua73z3wo0\u0026#34;,\u0026#34;created\u0026#34;:1717058059852,\u0026#34;text\u0026#34;:\u0026#34;原语\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muatq16k00\u0026#34;,\u0026#34;created\u0026#34;:1717058109075,\u0026#34;text\u0026#34;:\u0026#34;系统控制的数据结构与处理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muc2wlbl40\u0026#34;,\u0026#34;created\u0026#34;:1717058207427,\u0026#34;text\u0026#34;:\u0026#34;进程管理\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mucdbszfs0\u0026#34;,\u0026#34;created\u0026#34;:1717058230115,\u0026#34;text\u0026#34;:\u0026#34;存储器管理\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mucn1rbts0\u0026#34;,\u0026#34;created\u0026#34;:1717058251275,\u0026#34;text\u0026#34;:\u0026#34;设备管理\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mu9lyf76o0\u0026#34;,\u0026#34;created\u0026#34;:1717058013804,\u0026#34;text\u0026#34;:\u0026#34;非内核态\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mudmh184w0\u0026#34;,\u0026#34;created\u0026#34;:1717058328386,\u0026#34;text\u0026#34;:\u0026#34;中断\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muduyiupc0\u0026#34;,\u0026#34;created\u0026#34;:1717058346858,\u0026#34;text\u0026#34;:\u0026#34;外部中断(硬件)\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nsazmwxag0\u0026#34;,\u0026#34;created\u0026#34;:1717154039684,\u0026#34;text\u0026#34;:\u0026#34;可屏蔽中断INTR\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nsb0ji1oo0\u0026#34;,\u0026#34;created\u0026#34;:1717154041655,\u0026#34;text\u0026#34;:\u0026#34;不可屏蔽中断NMI\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mudwaev8o0\u0026#34;,\u0026#34;created\u0026#34;:1717058349754,\u0026#34;text\u0026#34;:\u0026#34;内部异常\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mueg4mezs0\u0026#34;,\u0026#34;created\u0026#34;:1717058392939,\u0026#34;text\u0026#34;:\u0026#34;软件中断\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mufr3qty80\u0026#34;,\u0026#34;created\u0026#34;:1717058495195,\u0026#34;text\u0026#34;:\u0026#34;故障\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muh1murs00\u0026#34;,\u0026#34;created\u0026#34;:1717058596482,\u0026#34;text\u0026#34;:\u0026#34;自己写的指令\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mufs7jsdc0\u0026#34;,\u0026#34;created\u0026#34;:1717058497602,\u0026#34;text\u0026#34;:\u0026#34;自陷\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muh79scg00\u0026#34;,\u0026#34;created\u0026#34;:1717058608753,\u0026#34;text\u0026#34;:\u0026#34;系统调用\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muexa77480\u0026#34;,\u0026#34;created\u0026#34;:1717058430282,\u0026#34;text\u0026#34;:\u0026#34;硬件中断\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mug7ruvz40\u0026#34;,\u0026#34;created\u0026#34;:1717058531482,\u0026#34;text\u0026#34;:\u0026#34;终止\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muj4z7h340\u0026#34;,\u0026#34;created\u0026#34;:1717058760488,\u0026#34;text\u0026#34;:\u0026#34;操作系统结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mujdppck80\u0026#34;,\u0026#34;created\u0026#34;:1717058779504,\u0026#34;text\u0026#34;:\u0026#34;分层法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mujxwy1dc0\u0026#34;,\u0026#34;created\u0026#34;:1717058823478,\u0026#34;text\u0026#34;:\u0026#34;模块化\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muk8o7e740\u0026#34;,\u0026#34;created\u0026#34;:1717058846894,\u0026#34;text\u0026#34;:\u0026#34;宏内核和微内核\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muq9mgihs0\u0026#34;,\u0026#34;created\u0026#34;:1717059319150,\u0026#34;text\u0026#34;:\u0026#34;虚拟机\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muqvy826o0\u0026#34;,\u0026#34;created\u0026#34;:1717059367751,\u0026#34;text\u0026#34;:\u0026#34;第一类虚拟机管理程序\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muqwwmkw00\u0026#34;,\u0026#34;created\u0026#34;:1717059369831,\u0026#34;text\u0026#34;:\u0026#34;第二类虚拟机管理程序\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtjbmprtk0\u0026#34;,\u0026#34;created\u0026#34;:1717055953860,\u0026#34;text\u0026#34;:\u0026#34;进程与线程\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muu4k41qg0\u0026#34;,\u0026#34;created\u0026#34;:1717059621581,\u0026#34;text\u0026#34;:\u0026#34;进程与线程\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nsdrvxlbs0\u0026#34;,\u0026#34;created\u0026#34;:1717154257908,\u0026#34;text\u0026#34;:\u0026#34;进程的概念与特怔\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nseocfyj40\u0026#34;,\u0026#34;created\u0026#34;:1717154328563,\u0026#34;text\u0026#34;:\u0026#34;进程是进程实体的运行过程，是资源分配和调度的独立单位\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nsgbekhvs0\u0026#34;,\u0026#34;created\u0026#34;:1717154457122,\u0026#34;text\u0026#34;:\u0026#34;动态性，并发性，独立性，异步性\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nshas1yfc0\u0026#34;,\u0026#34;created\u0026#34;:1717154534125,\u0026#34;text\u0026#34;:\u0026#34;进程由进程控制块，程序段，数据段组成\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nsibvkm800\u0026#34;,\u0026#34;created\u0026#34;:1717154614878,\u0026#34;text\u0026#34;:\u0026#34;进程有五个状态运行态，阻塞态，就绪态，创建态，终止态\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nspjy6w680\u0026#34;,\u0026#34;created\u0026#34;:1717155181000,\u0026#34;text\u0026#34;:\u0026#34;进程的通信分为共享存储，消息传递，管道通信\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1nswdh2kps0\u0026#34;,\u0026#34;created\u0026#34;:1717155715453,\u0026#34;text\u0026#34;:\u0026#34;线程\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muu6xc0o00\u0026#34;,\u0026#34;created\u0026#34;:1717059626734,\u0026#34;text\u0026#34;:\u0026#34;cpu调度\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ntccptjts0\u0026#34;,\u0026#34;created\u0026#34;:1717156967632,\u0026#34;text\u0026#34;:\u0026#34;调度的层次分为高级调度(作业调度)，中级调度(内存调度)，低级调度(进程调度)\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ok77pee740\u0026#34;,\u0026#34;created\u0026#34;:1717232734870,\u0026#34;text\u0026#34;:\u0026#34;调度器分为排队器，分派器，上下文切换器\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ok99b2low0\u0026#34;,\u0026#34;created\u0026#34;:1717232895085,\u0026#34;text\u0026#34;:\u0026#34;进程调度的方式分为非抢占调度方式和抢占调度方式\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1oke5mnivk0\u0026#34;,\u0026#34;created\u0026#34;:1717233278899,\u0026#34;text\u0026#34;:\u0026#34;调度算法评价的标准主要有cpu利用率，系统吞吐量，周转时间，等待时间，响应时间\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1okmld8vew0\u0026#34;,\u0026#34;created\u0026#34;:1717233940072,\u0026#34;text\u0026#34;:\u0026#34;调度算法分为先来先服务算法(FCFS)调度算法，短作业优先调度算法(SJF)和短进程优先(SPF)可以是抢占式的，高响比优先调度算法，优先调度算法，时间片轮转算法，多级队列调度算法，多级反馈队列调度算法\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muu7z5w5k0\u0026#34;,\u0026#34;created\u0026#34;:1717059629022,\u0026#34;text\u0026#34;:\u0026#34;同步与互斥\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph4o728io0\u0026#34;,\u0026#34;created\u0026#34;:1717325632301,\u0026#34;text\u0026#34;:\u0026#34;同步与互斥的基本概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pguwpw2140\u0026#34;,\u0026#34;created\u0026#34;:1717324867212,\u0026#34;text\u0026#34;:\u0026#34;一次仅让一个进程使用的资源叫临界资源\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pgvu4687s0\u0026#34;,\u0026#34;created\u0026#34;:1717324939909,\u0026#34;text\u0026#34;:\u0026#34;同步也叫直接制约关系，源于进程之间的合作\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pgvvx6qps0\u0026#34;,\u0026#34;created\u0026#34;:1717324943840,\u0026#34;text\u0026#34;:\u0026#34;互斥也叫间接制约关系，源于对临界资源的访问\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph10ww5x40\u0026#34;,\u0026#34;created\u0026#34;:1717325346527,\u0026#34;text\u0026#34;:\u0026#34;实现临界区要遵循的原则-空闲让进，忙则等待，有限等待，让权等待\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph32kq97s0\u0026#34;,\u0026#34;created\u0026#34;:1717325506874,\u0026#34;text\u0026#34;:\u0026#34;实现临界区互斥的方法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph6kyvso00\u0026#34;,\u0026#34;created\u0026#34;:1717325782004,\u0026#34;text\u0026#34;:\u0026#34;软件方法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph74c33mo0\u0026#34;,\u0026#34;created\u0026#34;:1717325824161,\u0026#34;text\u0026#34;:\u0026#34;单标志法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph9focoww0\u0026#34;,\u0026#34;created\u0026#34;:1717326005576,\u0026#34;text\u0026#34;:\u0026#34;若p1进程一直不进去，则p0进程想进去也进不去，违反空闲让进原则\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph7f6kxqo0\u0026#34;,\u0026#34;created\u0026#34;:1717325847773,\u0026#34;text\u0026#34;:\u0026#34;双标志位先检查法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phc8g0jaw0\u0026#34;,\u0026#34;created\u0026#34;:1717326224927,\u0026#34;text\u0026#34;:\u0026#34;违反忙则等待原则\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phdvgmtfs0\u0026#34;,\u0026#34;created\u0026#34;:1717326353394,\u0026#34;text\u0026#34;:\u0026#34;双标志位后检查法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phf5bsjbs0\u0026#34;,\u0026#34;created\u0026#34;:1717326453234,\u0026#34;text\u0026#34;:\u0026#34;违反空闲让进和有限等待原则\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phle64ryg0\u0026#34;,\u0026#34;created\u0026#34;:1717326942667,\u0026#34;text\u0026#34;:\u0026#34;Peterson算法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phlqlsfoo0\u0026#34;,\u0026#34;created\u0026#34;:1717326969736,\u0026#34;text\u0026#34;:\u0026#34;违反让权等待原则\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph6m1iovc0\u0026#34;,\u0026#34;created\u0026#34;:1717325784340,\u0026#34;text\u0026#34;:\u0026#34;硬件方法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phpokah4g0\u0026#34;,\u0026#34;created\u0026#34;:1717327278748,\u0026#34;text\u0026#34;:\u0026#34;中断屏蔽方法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phr0iobhk0\u0026#34;,\u0026#34;created\u0026#34;:1717327383136,\u0026#34;text\u0026#34;:\u0026#34;TestAndset指令\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phrenu5000\u0026#34;,\u0026#34;created\u0026#34;:1717327413923,\u0026#34;text\u0026#34;:\u0026#34;Swap指令\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ph63wsygw0\u0026#34;,\u0026#34;created\u0026#34;:1717325744873,\u0026#34;text\u0026#34;:\u0026#34;互斥锁\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phuvxzctk0\u0026#34;,\u0026#34;created\u0026#34;:1717327686634,\u0026#34;text\u0026#34;:\u0026#34;自旋锁\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phvy1fob40\u0026#34;,\u0026#34;created\u0026#34;:1717327769561,\u0026#34;text\u0026#34;:\u0026#34;信号量\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phwzdg89k0\u0026#34;,\u0026#34;created\u0026#34;:1717327850828,\u0026#34;text\u0026#34;:\u0026#34;整型信号量\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1piu1sxxb40\u0026#34;,\u0026#34;created\u0026#34;:1717330442136,\u0026#34;text\u0026#34;:\u0026#34;未遵循让权等待原则\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1phx0fodr40\u0026#34;,\u0026#34;created\u0026#34;:1717327853141,\u0026#34;text\u0026#34;:\u0026#34;记录型信号量\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pixuaq9mw0\u0026#34;,\u0026#34;created\u0026#34;:1717330739254,\u0026#34;text\u0026#34;:\u0026#34;实现进程互斥\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pizy9l2a00\u0026#34;,\u0026#34;created\u0026#34;:1717330904620,\u0026#34;text\u0026#34;:\u0026#34;信号量实现同步前v后p\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pj16e94d40\u0026#34;,\u0026#34;created\u0026#34;:1717331000681,\u0026#34;text\u0026#34;:\u0026#34;信号量实现前前驱关系\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pj2o424ig0\u0026#34;,\u0026#34;created\u0026#34;:1717331117611,\u0026#34;text\u0026#34;:\u0026#34;经典同步问题\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pj35z3d3c0\u0026#34;,\u0026#34;created\u0026#34;:1717331156492,\u0026#34;text\u0026#34;:\u0026#34;生产者消费者问题\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pj370krhc0\u0026#34;,\u0026#34;created\u0026#34;:1717331158759,\u0026#34;text\u0026#34;:\u0026#34;读者-写者问题\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pj382g5ds0\u0026#34;,\u0026#34;created\u0026#34;:1717331161049,\u0026#34;text\u0026#34;:\u0026#34;哲学家进餐问题\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pj54lkogg0\u0026#34;,\u0026#34;created\u0026#34;:1717331310226,\u0026#34;text\u0026#34;:\u0026#34;吸烟者问题\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pk1bwx1ag0\u0026#34;,\u0026#34;created\u0026#34;:1717333833803,\u0026#34;text\u0026#34;:\u0026#34;管程\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1pk4tx4qfs0\u0026#34;,\u0026#34;created\u0026#34;:1717334108091,\u0026#34;text\u0026#34;:\u0026#34;管程的名称，局限于管程内部共享局部说明，对该数据结构进行操作的一组过程，对局部于管程内部的共享数据设置初始值的语句\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muu98jufs0\u0026#34;,\u0026#34;created\u0026#34;:1717059631766,\u0026#34;text\u0026#34;:\u0026#34;死锁\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qbrczzq740\u0026#34;,\u0026#34;created\u0026#34;:1717412043602,\u0026#34;text\u0026#34;:\u0026#34;死锁的概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qc3yvmbu00\u0026#34;,\u0026#34;created\u0026#34;:1717413031596,\u0026#34;text\u0026#34;:\u0026#34;所谓死锁，是指多个进程因竟争资源而造成的一种僵局\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcaiiez4w0\u0026#34;,\u0026#34;created\u0026#34;:1717413544519,\u0026#34;text\u0026#34;:\u0026#34;发生死锁的进程必定大于或等于2个\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcby4cdsg0\u0026#34;,\u0026#34;created\u0026#34;:1717413656860,\u0026#34;text\u0026#34;:\u0026#34;发生饥饿的进程可能处于就绪态，也可能处于阻塞态，死锁一定处于阻塞态\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcfyojso80\u0026#34;,\u0026#34;created\u0026#34;:1717413971539,\u0026#34;text\u0026#34;:\u0026#34;产生死锁的必要条件互斥条件，不可剥夺条件，请求并保持条件，循环等待条件\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qchstnnag0\u0026#34;,\u0026#34;created\u0026#34;:1717414115515,\u0026#34;text\u0026#34;:\u0026#34;死锁的处理办法死锁预防，避免死锁，死锁的检测与解除\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qbre6slbs0\u0026#34;,\u0026#34;created\u0026#34;:1717412046190,\u0026#34;text\u0026#34;:\u0026#34;死锁的预防\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qc6u72pmo0\u0026#34;,\u0026#34;created\u0026#34;:1717413256498,\u0026#34;text\u0026#34;:\u0026#34;破坏死锁产生的几个必要条件之一即可\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcmt1bd3k0\u0026#34;,\u0026#34;created\u0026#34;:1717414507799,\u0026#34;text\u0026#34;:\u0026#34;循环等待\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcmu3vtrk0\u0026#34;,\u0026#34;created\u0026#34;:1717414510131,\u0026#34;text\u0026#34;:\u0026#34;互斥\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcmv3z3zs0\u0026#34;,\u0026#34;created\u0026#34;:1717414512314,\u0026#34;text\u0026#34;:\u0026#34;请求并保持\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcmwa2ns00\u0026#34;,\u0026#34;created\u0026#34;:1717414514859,\u0026#34;text\u0026#34;:\u0026#34;不可剥夺\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qbrf8jl7k0\u0026#34;,\u0026#34;created\u0026#34;:1717412048472,\u0026#34;text\u0026#34;:\u0026#34;死锁的检测和解除\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qc6v2yqs00\u0026#34;,\u0026#34;created\u0026#34;:1717413258426,\u0026#34;text\u0026#34;:\u0026#34;死锁的检测\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qd5sddsmo0\u0026#34;,\u0026#34;created\u0026#34;:1717415995271,\u0026#34;text\u0026#34;:\u0026#34;用资源分配图来检测系统所处的状态是否为死锁状态\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qd4hhw46g0\u0026#34;,\u0026#34;created\u0026#34;:1717415893235,\u0026#34;text\u0026#34;:\u0026#34;死锁的解除\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qd8eaibdc0\u0026#34;,\u0026#34;created\u0026#34;:1717416199715,\u0026#34;text\u0026#34;:\u0026#34;资源剥夺法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qd8jvso740\u0026#34;,\u0026#34;created\u0026#34;:1717416211886,\u0026#34;text\u0026#34;:\u0026#34;撤销进程法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qd8kyy7z40\u0026#34;,\u0026#34;created\u0026#34;:1717416214254,\u0026#34;text\u0026#34;:\u0026#34;进程回退法\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qckg0h73k0\u0026#34;,\u0026#34;created\u0026#34;:1717414322722,\u0026#34;text\u0026#34;:\u0026#34;死锁的避免\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qckx6btfs0\u0026#34;,\u0026#34;created\u0026#34;:1717414360081,\u0026#34;text\u0026#34;:\u0026#34;系统安全状态\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcxtkw77s0\u0026#34;,\u0026#34;created\u0026#34;:1717415370989,\u0026#34;text\u0026#34;:\u0026#34;所谓安全状态是指系统能按某种进程推进顺序分配所需的资源，直至满足每个进程对资源的最大需求，使每个进程都可完成\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qcu1ss3yw0\u0026#34;,\u0026#34;created\u0026#34;:1717415075423,\u0026#34;text\u0026#34;:\u0026#34;银行家算法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1qd2c0xm3s0\u0026#34;,\u0026#34;created\u0026#34;:1717415724597,\u0026#34;text\u0026#34;:\u0026#34;安全性算法\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtjquaiw80\u0026#34;,\u0026#34;created\u0026#34;:1717055986970,\u0026#34;text\u0026#34;:\u0026#34;内存管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muvhtnn340\u0026#34;,\u0026#34;created\u0026#34;:1717059728821,\u0026#34;text\u0026#34;:\u0026#34;内存管理概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rwz0aypb40\u0026#34;,\u0026#34;created\u0026#34;:1717573446145,\u0026#34;text\u0026#34;:\u0026#34;内存的基本原理和要求\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx0m4dlf40\u0026#34;,\u0026#34;created\u0026#34;:1717573572000,\u0026#34;text\u0026#34;:\u0026#34;程序的链接与装入\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx5bwipdc0\u0026#34;,\u0026#34;created\u0026#34;:1717573941578,\u0026#34;text\u0026#34;:\u0026#34;编译\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx5cwrmw00\u0026#34;,\u0026#34;created\u0026#34;:1717573943770,\u0026#34;text\u0026#34;:\u0026#34;链接\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx5dwhvqg0\u0026#34;,\u0026#34;created\u0026#34;:1717573945930,\u0026#34;text\u0026#34;:\u0026#34;装入\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx0zq8um00\u0026#34;,\u0026#34;created\u0026#34;:1717573601620,\u0026#34;text\u0026#34;:\u0026#34;逻辑地址与物理地址\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx191i24o0\u0026#34;,\u0026#34;created\u0026#34;:1717573621892,\u0026#34;text\u0026#34;:\u0026#34;进程的内存映像\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx1m09l1c0\u0026#34;,\u0026#34;created\u0026#34;:1717573650116,\u0026#34;text\u0026#34;:\u0026#34;内存保护\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx1uxctq80\u0026#34;,\u0026#34;created\u0026#34;:1717573669531,\u0026#34;text\u0026#34;:\u0026#34;内存共享\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx21umdo00\u0026#34;,\u0026#34;created\u0026#34;:1717573684603,\u0026#34;text\u0026#34;:\u0026#34;内存分配与回收\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rwz13lkjs0\u0026#34;,\u0026#34;created\u0026#34;:1717573447876,\u0026#34;text\u0026#34;:\u0026#34;基本分页存储管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxnk5onf40\u0026#34;,\u0026#34;created\u0026#34;:1717575370101,\u0026#34;text\u0026#34;:\u0026#34;分页存储的几个概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxojd0vnk0\u0026#34;,\u0026#34;created\u0026#34;:1717575446732,\u0026#34;text\u0026#34;:\u0026#34;逻辑地址分为页号和偏移量\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxok6xx5s0\u0026#34;,\u0026#34;created\u0026#34;:1717575448541,\u0026#34;text\u0026#34;:\u0026#34;页表分为页号与块号(页号是隐藏的)\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxsp4c5600\u0026#34;,\u0026#34;created\u0026#34;:1717575772724,\u0026#34;text\u0026#34;:\u0026#34;基本地址变换结构\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxtwf0le80\u0026#34;,\u0026#34;created\u0026#34;:1717575866972,\u0026#34;text\u0026#34;:\u0026#34;具有快表的地址变换结构\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxvpwb2i00\u0026#34;,\u0026#34;created\u0026#34;:1717576009508,\u0026#34;text\u0026#34;:\u0026#34;两级页表的逻辑地址空间一级页号，二级页号，页内偏移量\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx2rtdhmo0\u0026#34;,\u0026#34;created\u0026#34;:1717573741124,\u0026#34;text\u0026#34;:\u0026#34;连续分配管理方式\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxgvu0jyw0\u0026#34;,\u0026#34;created\u0026#34;:1717574846968,\u0026#34;text\u0026#34;:\u0026#34;单一连续分配\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxgwofrww0\u0026#34;,\u0026#34;created\u0026#34;:1717574848807,\u0026#34;text\u0026#34;:\u0026#34;固定分区分配\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxhnrsavc0\u0026#34;,\u0026#34;created\u0026#34;:1717574907783,\u0026#34;text\u0026#34;:\u0026#34;动态分区分配\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxiiirnao0\u0026#34;,\u0026#34;created\u0026#34;:1717574974718,\u0026#34;text\u0026#34;:\u0026#34;首次适应算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxijhkik00\u0026#34;,\u0026#34;created\u0026#34;:1717574976822,\u0026#34;text\u0026#34;:\u0026#34;邻近适应算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxim41cnk0\u0026#34;,\u0026#34;created\u0026#34;:1717574982534,\u0026#34;text\u0026#34;:\u0026#34;最佳适应算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rximybhk80\u0026#34;,\u0026#34;created\u0026#34;:1717574984365,\u0026#34;text\u0026#34;:\u0026#34;最坏适应算法\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx3lejrts0\u0026#34;,\u0026#34;created\u0026#34;:1717573805531,\u0026#34;text\u0026#34;:\u0026#34;基本分段存储管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rxyqodn600\u0026#34;,\u0026#34;created\u0026#34;:1717576246298,\u0026#34;text\u0026#34;:\u0026#34;段的逻辑地址分为段号与段内偏移量\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ry0ic1m680\u0026#34;,\u0026#34;created\u0026#34;:1717576384866,\u0026#34;text\u0026#34;:\u0026#34;段表分为段号，段长，本段在主存的始址\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1rx45i4skg0\u0026#34;,\u0026#34;created\u0026#34;:1717573849283,\u0026#34;text\u0026#34;:\u0026#34;段页式存储管理\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muvtsk6xs0\u0026#34;,\u0026#34;created\u0026#34;:1717059754876,\u0026#34;text\u0026#34;:\u0026#34;虚拟内存管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tt6yqllz40\u0026#34;,\u0026#34;created\u0026#34;:1717765905124,\u0026#34;text\u0026#34;:\u0026#34;局部性原理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tt86tna5c0\u0026#34;,\u0026#34;created\u0026#34;:1717766001086,\u0026#34;text\u0026#34;:\u0026#34;时间局部性\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tt87mmd3k0\u0026#34;,\u0026#34;created\u0026#34;:1717766002838,\u0026#34;text\u0026#34;:\u0026#34;空间局部性\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tt6zo5f1k0\u0026#34;,\u0026#34;created\u0026#34;:1717765907152,\u0026#34;text\u0026#34;:\u0026#34;概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tta7wlzhc0\u0026#34;,\u0026#34;created\u0026#34;:1717766160171,\u0026#34;text\u0026#34;:\u0026#34;之所以称为虚拟存储器，是因为这种存储器实际上并不存在\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttcfvk68w0\u0026#34;,\u0026#34;created\u0026#34;:1717766334250,\u0026#34;text\u0026#34;:\u0026#34;请求分页管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttg8qguxs0\u0026#34;,\u0026#34;created\u0026#34;:1717766632161,\u0026#34;text\u0026#34;:\u0026#34;页表机制\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tth3jqsww0\u0026#34;,\u0026#34;created\u0026#34;:1717766699235,\u0026#34;text\u0026#34;:\u0026#34;页号，物理块号，状态位，访问字段，修改位，外存地址\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttgev7vkw0\u0026#34;,\u0026#34;created\u0026#34;:1717766645509,\u0026#34;text\u0026#34;:\u0026#34;缺页中断机构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tx886y2ug0\u0026#34;,\u0026#34;created\u0026#34;:1717777288507,\u0026#34;text\u0026#34;:\u0026#34;属于内部异常\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttgnz2a200\u0026#34;,\u0026#34;created\u0026#34;:1717766665333,\u0026#34;text\u0026#34;:\u0026#34;地址变换机构\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttcgrj9q00\u0026#34;,\u0026#34;created\u0026#34;:1717766336183,\u0026#34;text\u0026#34;:\u0026#34;页框分配\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txb3omng80\u0026#34;,\u0026#34;created\u0026#34;:1717777513785,\u0026#34;text\u0026#34;:\u0026#34;给一个进程分配的页框的集合就是驻留集\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txe3otbds0\u0026#34;,\u0026#34;created\u0026#34;:1717777748888,\u0026#34;text\u0026#34;:\u0026#34;内存置换分配方案\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txf9b93sw0\u0026#34;,\u0026#34;created\u0026#34;:1717777839493,\u0026#34;text\u0026#34;:\u0026#34;固定分配局部置换\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txfagxulc0\u0026#34;,\u0026#34;created\u0026#34;:1717777842014,\u0026#34;text\u0026#34;:\u0026#34;可变分配局部置换\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txfbf3nns0\u0026#34;,\u0026#34;created\u0026#34;:1717777844080,\u0026#34;text\u0026#34;:\u0026#34;可变分配全局分配\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttdja05ps0\u0026#34;,\u0026#34;created\u0026#34;:1717766420018,\u0026#34;text\u0026#34;:\u0026#34;抖动与工作集\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tyaa3ltgw0\u0026#34;,\u0026#34;created\u0026#34;:1717780270497,\u0026#34;text\u0026#34;:\u0026#34;刚刚换入的页面又要换出内存，刚刚换出的页面又要换入内存就叫抖动\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tymbtisd40\u0026#34;,\u0026#34;created\u0026#34;:1717781214611,\u0026#34;text\u0026#34;:\u0026#34;工作集指段时间间隔内，进程要访问的页面集合\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ttdzb1ca00\u0026#34;,\u0026#34;created\u0026#34;:1717766454909,\u0026#34;text\u0026#34;:\u0026#34;内存映射文件\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txom40elc0\u0026#34;,\u0026#34;created\u0026#34;:1717778572631,\u0026#34;text\u0026#34;:\u0026#34;页面置换算法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txoucoz3k0\u0026#34;,\u0026#34;created\u0026#34;:1717778590570,\u0026#34;text\u0026#34;:\u0026#34;最佳置换算法OPT\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txtaxyxzk0\u0026#34;,\u0026#34;created\u0026#34;:1717778940142,\u0026#34;text\u0026#34;:\u0026#34;选择淘汰的是最长时间内不再访问的页面\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txtc9ddjc0\u0026#34;,\u0026#34;created\u0026#34;:1717778943008,\u0026#34;text\u0026#34;:\u0026#34;理想的算法，还未实现\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txovn4cu00\u0026#34;,\u0026#34;created\u0026#34;:1717778593378,\u0026#34;text\u0026#34;:\u0026#34;先进先出页面置换算法FIFO\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txvcsgyew0\u0026#34;,\u0026#34;created\u0026#34;:1717779100891,\u0026#34;text\u0026#34;:\u0026#34;淘汰的页面是最早进来的\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txwt6aq2o0\u0026#34;,\u0026#34;created\u0026#34;:1717779214920,\u0026#34;text\u0026#34;:\u0026#34; 会出现Belady异常（当为进程分配的物理块增加时，缺页次数不减反而增的现象）\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txowv6uv40\u0026#34;,\u0026#34;created\u0026#34;:1717778596042,\u0026#34;text\u0026#34;:\u0026#34;最近最久未使用置换算法LRU\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ty05ebe7c0\u0026#34;,\u0026#34;created\u0026#34;:1717779476619,\u0026#34;text\u0026#34;:\u0026#34;LRU选择淘汰的页面是最近最长时间没有使用的页面\u0026#34;,\u0026#34;layout_bottom_offset\u0026#34;:{\u0026#34;x\u0026#34;:6.999999791383743,\u0026#34;y\u0026#34;:1.999999940395469}},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ty06gv1iw0\u0026#34;,\u0026#34;created\u0026#34;:1717779478950,\u0026#34;text\u0026#34;:\u0026#34;堆栈的算法，不会出现Belady现象\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1txrb89u5c0\u0026#34;,\u0026#34;created\u0026#34;:1717778784037,\u0026#34;text\u0026#34;:\u0026#34;时钟算法CLOCK NRU算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1tygp02atc0\u0026#34;,\u0026#34;created\u0026#34;:1717780773119,\u0026#34;text\u0026#34;:\u0026#34;操作系统中的置换算法，尽可能保留访问过的页面，而淘汰未访问的页面\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtk0ufheg0\u0026#34;,\u0026#34;created\u0026#34;:1717056008746,\u0026#34;text\u0026#34;:\u0026#34;文件管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muw7q4q3k0\u0026#34;,\u0026#34;created\u0026#34;:1717059785204,\u0026#34;text\u0026#34;:\u0026#34;文件系统基础\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugi2uxq9c0\u0026#34;,\u0026#34;created\u0026#34;:1717831661627,\u0026#34;text\u0026#34;:\u0026#34;文件的基本概念\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugjbl6dcg0\u0026#34;,\u0026#34;created\u0026#34;:1717831758992,\u0026#34;text\u0026#34;:\u0026#34;文件是以硬盘为载体的存储在计算机的信息集合\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugk0zgtfs0\u0026#34;,\u0026#34;created\u0026#34;:1717831814275,\u0026#34;text\u0026#34;:\u0026#34;文件的基本结构分为数据项，记录，文件（自底向上的方定义）\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugl8zy0o80\u0026#34;,\u0026#34;created\u0026#34;:1717831910083,\u0026#34;text\u0026#34;:\u0026#34;文件的属性名称，类型，所有者，创建者，位置，大小等等\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugmm4la3k0\u0026#34;,\u0026#34;created\u0026#34;:1717832017026,\u0026#34;text\u0026#34;:\u0026#34;文件控制块与索引节点\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugnicnr1k0\u0026#34;,\u0026#34;created\u0026#34;:1717832087171,\u0026#34;text\u0026#34;:\u0026#34;FCB即是文件控制块,FCB的有序集合即为目录，一个FCB即是一个文件目录项\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugoc4b5u00\u0026#34;,\u0026#34;created\u0026#34;:1717832151970,\u0026#34;text\u0026#34;:\u0026#34;在文件目录的每个目录项由文件名和相应的索引结点构成\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uguspumjc0\u0026#34;,\u0026#34;created\u0026#34;:1717832658286,\u0026#34;text\u0026#34;:\u0026#34;文件的操作\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugvm2hq080\u0026#34;,\u0026#34;created\u0026#34;:1717832722177,\u0026#34;text\u0026#34;:\u0026#34;创建，删除，读写文件\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugw1a8u9k0\u0026#34;,\u0026#34;created\u0026#34;:1717832755297,\u0026#34;text\u0026#34;:\u0026#34;文件的打开与关闭open与close函数\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugxykko940\u0026#34;,\u0026#34;created\u0026#34;:1717832906120,\u0026#34;text\u0026#34;:\u0026#34;文件的保护\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugy6aycsw0\u0026#34;,\u0026#34;created\u0026#34;:1717832922952,\u0026#34;text\u0026#34;:\u0026#34;控制用户对文件的访问类型，口令，密码\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugyy3uyg00\u0026#34;,\u0026#34;created\u0026#34;:1717832983473,\u0026#34;text\u0026#34;:\u0026#34;文件的逻辑结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugz7yop340\u0026#34;,\u0026#34;created\u0026#34;:1717833004928,\u0026#34;text\u0026#34;:\u0026#34;无结构文件\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugzn60tug0\u0026#34;,\u0026#34;created\u0026#34;:1717833038024,\u0026#34;text\u0026#34;:\u0026#34;流式文件，由字符流构成的文件\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugzhzzug00\u0026#34;,\u0026#34;created\u0026#34;:1717833026775,\u0026#34;text\u0026#34;:\u0026#34;有结构文件\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ugzvw9d2g0\u0026#34;,\u0026#34;created\u0026#34;:1717833057024,\u0026#34;text\u0026#34;:\u0026#34;顺序文件\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uh2k0ouls0\u0026#34;,\u0026#34;created\u0026#34;:1717833266263,\u0026#34;text\u0026#34;:\u0026#34;串结构\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uh2qdgp2w0\u0026#34;,\u0026#34;created\u0026#34;:1717833280096,\u0026#34;text\u0026#34;:\u0026#34;顺序结构\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uh13tpgv40\u0026#34;,\u0026#34;created\u0026#34;:1717833152648,\u0026#34;text\u0026#34;:\u0026#34;索引文件\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uh3tg8qyo0\u0026#34;,\u0026#34;created\u0026#34;:1717833365159,\u0026#34;text\u0026#34;:\u0026#34;索引表(本身也是一个定长记录的文件)和逻辑文件\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uh14qe6iw0\u0026#34;,\u0026#34;created\u0026#34;:1717833154625,\u0026#34;text\u0026#34;:\u0026#34;索引顺序文件\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uh5q7a4yw0\u0026#34;,\u0026#34;created\u0026#34;:1717833514815,\u0026#34;text\u0026#34;:\u0026#34;索引表（同一个组的关键字可以无序，不同组的关键字必须有序)和逻辑文件(检索时，首先查找索引表，找改记录所在的组，然后在该组中使用顺序查找）\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhbp700n40\u0026#34;,\u0026#34;created\u0026#34;:1717833982806,\u0026#34;text\u0026#34;:\u0026#34;物理结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhbsda8dc0\u0026#34;,\u0026#34;created\u0026#34;:1717833989716,\u0026#34;text\u0026#34;:\u0026#34;连续分配\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhh7bauds0\u0026#34;,\u0026#34;created\u0026#34;:1717834414069,\u0026#34;text\u0026#34;:\u0026#34;连续分配要求每个文件在磁盘中占有连续的块\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhj7xn5dk0\u0026#34;,\u0026#34;created\u0026#34;:1717834572148,\u0026#34;text\u0026#34;:\u0026#34;链接分配\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhjybm3u00\u0026#34;,\u0026#34;created\u0026#34;:1717834629589,\u0026#34;text\u0026#34;:\u0026#34;隐式链接\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhl03t6h40\u0026#34;,\u0026#34;created\u0026#34;:1717834711835,\u0026#34;text\u0026#34;:\u0026#34;目录项含有文件第一块的指针和最后一块的指针\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhke7td1c0\u0026#34;,\u0026#34;created\u0026#34;:1717834664188,\u0026#34;text\u0026#34;:\u0026#34;显式链接\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhmnflejk0\u0026#34;,\u0026#34;created\u0026#34;:1717834840978,\u0026#34;text\u0026#34;:\u0026#34;有个FAT文件分配表\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhng51gjc0\u0026#34;,\u0026#34;created\u0026#34;:1717834903467,\u0026#34;text\u0026#34;:\u0026#34;索引分配\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uhqqjms280\u0026#34;,\u0026#34;created\u0026#34;:1717835161209,\u0026#34;text\u0026#34;:\u0026#34;单级索引分配方式\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uicft1gv40\u0026#34;,\u0026#34;created\u0026#34;:1717836861845,\u0026#34;text\u0026#34;:\u0026#34;多级索引分配方式\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muwf0rg0g0\u0026#34;,\u0026#34;created\u0026#34;:1717059801084,\u0026#34;text\u0026#34;:\u0026#34;目录\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujic276f40\u0026#34;,\u0026#34;created\u0026#34;:1717840144987,\u0026#34;text\u0026#34;:\u0026#34;目录结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujmpupnag0\u0026#34;,\u0026#34;created\u0026#34;:1717840488466,\u0026#34;text\u0026#34;:\u0026#34;单级目录结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujoelze8g0\u0026#34;,\u0026#34;created\u0026#34;:1717840620721,\u0026#34;text\u0026#34;:\u0026#34;实现了按名存取，但不能让文件重名，查找速度慢\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujmyipuow0\u0026#34;,\u0026#34;created\u0026#34;:1717840507331,\u0026#34;text\u0026#34;:\u0026#34;两级目录结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ukik9lkbs0\u0026#34;,\u0026#34;created\u0026#34;:1717842983958,\u0026#34;text\u0026#34;:\u0026#34;主文件目录和用户文件目录，缺少灵活性，不能对文件分类\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujnac65qg0\u0026#34;,\u0026#34;created\u0026#34;:1717840533057,\u0026#34;text\u0026#34;:\u0026#34;树形目录结构\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujnh3vt340\u0026#34;,\u0026#34;created\u0026#34;:1717840547793,\u0026#34;text\u0026#34;:\u0026#34;无环图目录结构\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujictumtk0\u0026#34;,\u0026#34;created\u0026#34;:1717840146659,\u0026#34;text\u0026#34;:\u0026#34;目录操作\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ukmbk1zy80\u0026#34;,\u0026#34;created\u0026#34;:1717843278456,\u0026#34;text\u0026#34;:\u0026#34;搜索，创建文件，删除文件，创建目录，删除目录\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujidl8r7c0\u0026#34;,\u0026#34;created\u0026#34;:1717840148315,\u0026#34;text\u0026#34;:\u0026#34;目录实现\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ukl4z67ig0\u0026#34;,\u0026#34;created\u0026#34;:1717843185769,\u0026#34;text\u0026#34;:\u0026#34;线性列表\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ukl5o1sbk0\u0026#34;,\u0026#34;created\u0026#34;:1717843187273,\u0026#34;text\u0026#34;:\u0026#34;哈希表\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ujmeraafc0\u0026#34;,\u0026#34;created\u0026#34;:1717840464314,\u0026#34;text\u0026#34;:\u0026#34;文件共享\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uknehqk4w0\u0026#34;,\u0026#34;created\u0026#34;:1717843363210,\u0026#34;text\u0026#34;:\u0026#34;基于索引结点的共享方式(硬链接)\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uknff2mo00\u0026#34;,\u0026#34;created\u0026#34;:1717843365226,\u0026#34;text\u0026#34;:\u0026#34;利用符号链实现文件共享（软链接)\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muwiun2zs0\u0026#34;,\u0026#34;created\u0026#34;:1717059809421,\u0026#34;text\u0026#34;:\u0026#34;文件系统\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ukzqnyjs00\u0026#34;,\u0026#34;created\u0026#34;:1717844330078,\u0026#34;text\u0026#34;:\u0026#34;文件系统结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul28r06ew0\u0026#34;,\u0026#34;created\u0026#34;:1717844526173,\u0026#34;text\u0026#34;:\u0026#34;应用程序\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;expand\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul2kjb7fk0\u0026#34;,\u0026#34;created\u0026#34;:1717844551829,\u0026#34;text\u0026#34;:\u0026#34;逻辑文件系统\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul2r6se0w0\u0026#34;,\u0026#34;created\u0026#34;:1717844566309,\u0026#34;text\u0026#34;:\u0026#34;文件组织模块\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul30ud3yg0\u0026#34;,\u0026#34;created\u0026#34;:1717844587326,\u0026#34;text\u0026#34;:\u0026#34;基本文件系统\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;expand\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul38nf9iw0\u0026#34;,\u0026#34;created\u0026#34;:1717844604320,\u0026#34;text\u0026#34;:\u0026#34;I/O控制\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;expand\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul3kyuv7c0\u0026#34;,\u0026#34;created\u0026#34;:1717844631133,\u0026#34;text\u0026#34;:\u0026#34;设备\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ukzrogwd40\u0026#34;,\u0026#34;created\u0026#34;:1717844332286,\u0026#34;text\u0026#34;:\u0026#34;文件系统布局\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul852svt40\u0026#34;,\u0026#34;created\u0026#34;:1717844988364,\u0026#34;text\u0026#34;:\u0026#34;文件系统在磁盘中的结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul99jfe9k0\u0026#34;,\u0026#34;created\u0026#34;:1717845076440,\u0026#34;text\u0026#34;:\u0026#34;主引导记录\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulbpas9gw0\u0026#34;,\u0026#34;created\u0026#34;:1717845267475,\u0026#34;text\u0026#34;:\u0026#34;位于磁盘的0号扇区，用来引导计算机\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulb3a5p5c0\u0026#34;,\u0026#34;created\u0026#34;:1717845219548,\u0026#34;text\u0026#34;:\u0026#34;引导块\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uldn0hhkg0\u0026#34;,\u0026#34;created\u0026#34;:1717845419227,\u0026#34;text\u0026#34;:\u0026#34;负责启动该分区中的操作系统，分区引导扇区\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulb43njo80\u0026#34;,\u0026#34;created\u0026#34;:1717845221331,\u0026#34;text\u0026#34;:\u0026#34;超级块\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulf2cx09k0\u0026#34;,\u0026#34;created\u0026#34;:1717845530994,\u0026#34;text\u0026#34;:\u0026#34;包含文件系统的所有信息\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulh2cnigo0\u0026#34;,\u0026#34;created\u0026#34;:1717845687707,\u0026#34;text\u0026#34;:\u0026#34;文件系统中空闲块的信息\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul85v3o9s0\u0026#34;,\u0026#34;created\u0026#34;:1717844990075,\u0026#34;text\u0026#34;:\u0026#34;文件系统在内存中的结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulhx0bxk80\u0026#34;,\u0026#34;created\u0026#34;:1717845754442,\u0026#34;text\u0026#34;:\u0026#34;内存中的安装表\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uliawdwao0\u0026#34;,\u0026#34;created\u0026#34;:1717845784678,\u0026#34;text\u0026#34;:\u0026#34;内存中目录结构的缓存\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uljlgcgts0\u0026#34;,\u0026#34;created\u0026#34;:1717845886017,\u0026#34;text\u0026#34;:\u0026#34;整个系统的打开文件表\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uljwpqr5s0\u0026#34;,\u0026#34;created\u0026#34;:1717845910530,\u0026#34;text\u0026#34;:\u0026#34;每个进程的打开文件表\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ul0kgov1s0\u0026#34;,\u0026#34;created\u0026#34;:1717844394942,\u0026#34;text\u0026#34;:\u0026#34;外存空闲空间管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uls2f5s280\u0026#34;,\u0026#34;created\u0026#34;:1717846549864,\u0026#34;text\u0026#34;:\u0026#34;空闲表法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uls3bpgvs0\u0026#34;,\u0026#34;created\u0026#34;:1717846551832,\u0026#34;text\u0026#34;:\u0026#34;空闲链表法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulxfkoyps0\u0026#34;,\u0026#34;created\u0026#34;:1717846970318,\u0026#34;text\u0026#34;:\u0026#34;空闲盘块链\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1ulxgi1bpc0\u0026#34;,\u0026#34;created\u0026#34;:1717846972334,\u0026#34;text\u0026#34;:\u0026#34;空闲盘区链\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uls4iudgo0\u0026#34;,\u0026#34;created\u0026#34;:1717846554440,\u0026#34;text\u0026#34;:\u0026#34;位示图法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1uls5vegug0\u0026#34;,\u0026#34;created\u0026#34;:1717846557376,\u0026#34;text\u0026#34;:\u0026#34;成组链接法\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1mtk24mrmo0\u0026#34;,\u0026#34;created\u0026#34;:1717056011540,\u0026#34;text\u0026#34;:\u0026#34;输入输出管理（I/O管理）\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;,\u0026#34;layout_bottom_offset\u0026#34;:{\u0026#34;x\u0026#34;:32.99999901652325,\u0026#34;y\u0026#34;:9.99999970197672}},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muwpkhz3k0\u0026#34;,\u0026#34;created\u0026#34;:1717059824045,\u0026#34;text\u0026#34;:\u0026#34;io管理概述\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v5qwj7njc0\u0026#34;,\u0026#34;created\u0026#34;:1717902880882,\u0026#34;text\u0026#34;:\u0026#34;i/o设备\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v5tgfero00\u0026#34;,\u0026#34;created\u0026#34;:1717903080916,\u0026#34;text\u0026#34;:\u0026#34;块设备，字符设备（按照信息交换的单位分类）低速，中速，高速（按照设备的传速速率分类）存储设备，输入/输出设备（按照设备的使用特性分类）\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v5ts1cwww0\u0026#34;,\u0026#34;created\u0026#34;:1717903106188,\u0026#34;text\u0026#34;:\u0026#34;i/o接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v61r3m4880\u0026#34;,\u0026#34;created\u0026#34;:1717903731061,\u0026#34;text\u0026#34;:\u0026#34;i/o接口是cpu与设备之间的接口，以实现设备与计算机之间的信息交换\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v5ravnckg0\u0026#34;,\u0026#34;created\u0026#34;:1717902912109,\u0026#34;text\u0026#34;:\u0026#34;i/o控制方式\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v64qljlhs0\u0026#34;,\u0026#34;created\u0026#34;:1717903965061,\u0026#34;text\u0026#34;:\u0026#34;程序直接控制方式\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v64sg15dk0\u0026#34;,\u0026#34;created\u0026#34;:1717903969081,\u0026#34;text\u0026#34;:\u0026#34;中断驱动方式\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v64uivqyw0\u0026#34;,\u0026#34;created\u0026#34;:1717903973607,\u0026#34;text\u0026#34;:\u0026#34;DMA方式\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7iz3n1oo0\u0026#34;,\u0026#34;created\u0026#34;:1717907901778,\u0026#34;text\u0026#34;:\u0026#34;数据传输以\\\u0026#34;块\\\u0026#34;为单位，cpu介入的频率降低\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v64wtfu680\u0026#34;,\u0026#34;created\u0026#34;:1717903978599,\u0026#34;text\u0026#34;:\u0026#34;通道控制方式\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7ktd9ekg0\u0026#34;,\u0026#34;created\u0026#34;:1717908046027,\u0026#34;text\u0026#34;:\u0026#34;弱鸡版cpu\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v5rkz86600\u0026#34;,\u0026#34;created\u0026#34;:1717902934093,\u0026#34;text\u0026#34;:\u0026#34;i/o软件层次结构\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v65a25lq00\u0026#34;,\u0026#34;created\u0026#34;:1717904007424,\u0026#34;text\u0026#34;:\u0026#34;用户层软件\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7m8y51800\u0026#34;,\u0026#34;created\u0026#34;:1717908158305,\u0026#34;text\u0026#34;:\u0026#34;设备独立性软件\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7maal1c80\u0026#34;,\u0026#34;created\u0026#34;:1717908161235,\u0026#34;text\u0026#34;:\u0026#34;设备驱动程序\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7mc4k3k80\u0026#34;,\u0026#34;created\u0026#34;:1717908165224,\u0026#34;text\u0026#34;:\u0026#34;中断处理程序\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7mdgqt8o0\u0026#34;,\u0026#34;created\u0026#34;:1717908168137,\u0026#34;text\u0026#34;:\u0026#34;硬件\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v5skmz5ko0\u0026#34;,\u0026#34;created\u0026#34;:1717903011717,\u0026#34;text\u0026#34;:\u0026#34;应用程序i/o接口\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v65hbgjnk0\u0026#34;,\u0026#34;created\u0026#34;:1717904023224,\u0026#34;text\u0026#34;:\u0026#34;i/o接口的分类\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7zhgwbzk0\u0026#34;,\u0026#34;created\u0026#34;:1717909195588,\u0026#34;text\u0026#34;:\u0026#34;字符设备接口\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7zilxh4g0\u0026#34;,\u0026#34;created\u0026#34;:1717909198069,\u0026#34;text\u0026#34;:\u0026#34;块设备接口\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v7zjj0ffc0\u0026#34;,\u0026#34;created\u0026#34;:1717909200069,\u0026#34;text\u0026#34;:\u0026#34;网络设备接口\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v65jelo1c0\u0026#34;,\u0026#34;created\u0026#34;:1717904027768,\u0026#34;text\u0026#34;:\u0026#34;阻塞i/o和非阻塞i/o\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muxfg1y1k0\u0026#34;,\u0026#34;created\u0026#34;:1717059880373,\u0026#34;text\u0026#34;:\u0026#34;设备独立性软件\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v89pjmrp40\u0026#34;,\u0026#34;created\u0026#34;:1717909996809,\u0026#34;text\u0026#34;:\u0026#34;磁盘高速缓存在逻辑上属于磁盘，在物理上属于内存\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v89snxy400\u0026#34;,\u0026#34;created\u0026#34;:1717910003600,\u0026#34;text\u0026#34;:\u0026#34;缓冲区\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8bqry6rc0\u0026#34;,\u0026#34;created\u0026#34;:1717910156217,\u0026#34;text\u0026#34;:\u0026#34;单缓冲\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8brrntqg0\u0026#34;,\u0026#34;created\u0026#34;:1717910158377,\u0026#34;text\u0026#34;:\u0026#34;双缓冲\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8bv5nsc80\u0026#34;,\u0026#34;created\u0026#34;:1717910165753,\u0026#34;text\u0026#34;:\u0026#34;循环缓冲\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8bw22ce00\u0026#34;,\u0026#34;created\u0026#34;:1717910167713,\u0026#34;text\u0026#34;:\u0026#34;缓冲池\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8d7drgy00\u0026#34;,\u0026#34;created\u0026#34;:1717910270729,\u0026#34;text\u0026#34;:\u0026#34;设备分配与回收\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8m2931lk0\u0026#34;,\u0026#34;created\u0026#34;:1717910964839,\u0026#34;text\u0026#34;:\u0026#34;设备控制表DCT\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8m36o7q00\u0026#34;,\u0026#34;created\u0026#34;:1717910966870,\u0026#34;text\u0026#34;:\u0026#34;控制器控制表COCT\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8m42jsig0\u0026#34;,\u0026#34;created\u0026#34;:1717910968798,\u0026#34;text\u0026#34;:\u0026#34;通道控制表CHCT\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8m4xeli80\u0026#34;,\u0026#34;created\u0026#34;:1717910970664,\u0026#34;text\u0026#34;:\u0026#34;系统设备表SDT\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8v97igww0\u0026#34;,\u0026#34;created\u0026#34;:1717911685259,\u0026#34;text\u0026#34;:\u0026#34;SPOOLing技术(假脱机技术)\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1v8w4zyju80\u0026#34;,\u0026#34;created\u0026#34;:1717911754460,\u0026#34;text\u0026#34;:\u0026#34;操作系统采用的一项将独占设备改造成共享设备的技术\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1muxqio8kg0\u0026#34;,\u0026#34;created\u0026#34;:1717059904476,\u0026#34;text\u0026#34;:\u0026#34;磁盘与固态硬盘\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaa9yfftc0\u0026#34;,\u0026#34;created\u0026#34;:1717915683459,\u0026#34;text\u0026#34;:\u0026#34;磁盘\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vabqqlf680\u0026#34;,\u0026#34;created\u0026#34;:1717915798355,\u0026#34;text\u0026#34;:\u0026#34;磁盘是表面涂有磁性物质的物理盘片\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaajxwac00\u0026#34;,\u0026#34;created\u0026#34;:1717915705195,\u0026#34;text\u0026#34;:\u0026#34;磁盘的管理\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaesoqsu00\u0026#34;,\u0026#34;created\u0026#34;:1717916037690,\u0026#34;text\u0026#34;:\u0026#34;磁盘初始化\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaetd5p4g0\u0026#34;,\u0026#34;created\u0026#34;:1717916039165,\u0026#34;text\u0026#34;:\u0026#34;分区\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaeua7dn40\u0026#34;,\u0026#34;created\u0026#34;:1717916041164,\u0026#34;text\u0026#34;:\u0026#34;引导块\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaev8fs9k0\u0026#34;,\u0026#34;created\u0026#34;:1717916043234,\u0026#34;text\u0026#34;:\u0026#34;坏块\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaapd1ys00\u0026#34;,\u0026#34;created\u0026#34;:1717915716995,\u0026#34;text\u0026#34;:\u0026#34;磁盘调度算法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vagm9g9zc0\u0026#34;,\u0026#34;created\u0026#34;:1717916180432,\u0026#34;text\u0026#34;:\u0026#34;磁盘的存取时间\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vahffuvlk0\u0026#34;,\u0026#34;created\u0026#34;:1717916243946,\u0026#34;text\u0026#34;:\u0026#34;寻道时间跨越n条隧道的时间和磁头臂启动的时间\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vahko3lz40\u0026#34;,\u0026#34;created\u0026#34;:1717916255329,\u0026#34;text\u0026#34;:\u0026#34;旋转延迟时间，磁头定位到读/写扇区所需要的时间\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vahlnpa9c0\u0026#34;,\u0026#34;created\u0026#34;:1717916257481,\u0026#34;text\u0026#34;:\u0026#34;传输时间从磁盘读出或向磁盘写入数据所需的时间\u0026#34;},\u0026#34;children\u0026#34;:[]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vagnzi0u80\u0026#34;,\u0026#34;created\u0026#34;:1717916184184,\u0026#34;text\u0026#34;:\u0026#34;磁盘调度算法\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vanvxytc00\u0026#34;,\u0026#34;created\u0026#34;:1717916750055,\u0026#34;text\u0026#34;:\u0026#34;先来先服务算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vaph66zu00\u0026#34;,\u0026#34;created\u0026#34;:1717916874629,\u0026#34;text\u0026#34;:\u0026#34;最短寻道时间优先算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1var4hmhjk0\u0026#34;,\u0026#34;created\u0026#34;:1717917003750,\u0026#34;text\u0026#34;:\u0026#34;扫描算法(SCAN),电梯调度算法\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vasg972080\u0026#34;,\u0026#34;created\u0026#34;:1717917107726,\u0026#34;text\u0026#34;:\u0026#34;循环扫描算法(C-SCAN)\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vau0hcpig0\u0026#34;,\u0026#34;created\u0026#34;:1717917230119,\u0026#34;text\u0026#34;:\u0026#34;SCAN算法的改进教LOCK调度\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vautuz4l40\u0026#34;,\u0026#34;created\u0026#34;:1717917294069,\u0026#34;text\u0026#34;:\u0026#34;C-SCAN算法的改进叫作C-LOCK调度\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vab7xcbf40\u0026#34;,\u0026#34;created\u0026#34;:1717915757404,\u0026#34;text\u0026#34;:\u0026#34;固态硬盘\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vayl077k80\u0026#34;,\u0026#34;created\u0026#34;:1717917588251,\u0026#34;text\u0026#34;:\u0026#34;是一种基于闪存技术的存储器\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vb048dilc0\u0026#34;,\u0026#34;created\u0026#34;:1717917708468,\u0026#34;text\u0026#34;:\u0026#34;磨损均衡\u0026#34;,\u0026#34;expandState\u0026#34;:\u0026#34;collapse\u0026#34;},\u0026#34;children\u0026#34;:[{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vb0tnwjh40\u0026#34;,\u0026#34;created\u0026#34;:1717917763827,\u0026#34;text\u0026#34;:\u0026#34;动态磨损均衡\u0026#34;},\u0026#34;children\u0026#34;:[]},{\u0026#34;data\u0026#34;:{\u0026#34;id\u0026#34;:\u0026#34;d1vb0uliqw00\u0026#34;,\u0026#34;created\u0026#34;:1717917765859,\u0026#34;text\u0026#34;:\u0026#34;静态磨损均衡\u0026#34;},\u0026#34;children\u0026#34;:[]}]}]}]}]}]},\u0026#34;template\u0026#34;:\u0026#34;structure\u0026#34;,\u0026#34;theme\u0026#34;:\u0026#34;fresh-blue\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;1.4.33\u0026#34;} ","date":"2024-10-09T12:20:39+08:00","permalink":"https://getshhi.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","title":"计算机操作系统思维导图"},{"content":"实现原理分析 HashMap的底层是红黑树,数组,链表;默认其初始容量为16;当put时首先就会进入到putVal这个函数,到这个函数中首先先判断底层的table是否为空或者长度为0,若是则会扩容到16,然后根据key值计算出table值,若table值为空,则直接加入到这个table位置上;若不是则会判断加入的key和旧的key是否是同一对象或者euqals相同,若是,则不用加了;若不是，先判断是否是为红黑树,如果是,则按照红黑树的逻辑加,若不是则会进入死循环,死循环中如果有key相同就只是替换value,如果不是则尾插到链表末尾,若单个链表超过8个,则会进行树化,在树化这个函数中先判断容量是否超过64,如果是则树化否则扩容。最后判断是否需要扩容。\n源码分析 首先会进入put函数 1 2 3 4 5 public V put(K key, V value) { //传入其哈希值和key和value //(h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16) 计算key的hash值,让高位和低位进行异或 return putVal(hash(key), key, value, false, true); } 然后执行putval方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node\u0026lt;K,V\u0026gt;[] tab; Node\u0026lt;K,V\u0026gt; p; int n, i;//辅助变量 //如果底层的table数组为null,或者length = 0,就扩容到16 if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; //取出hash值对应的table的索引位置的Node,如果为空,则直接创建一个新的节点,填入key和value,加入该位置 if ((p = tab[i = (n - 1) \u0026amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node\u0026lt;K,V\u0026gt; e; K k; // 辅助变量 //如果table的索引位置的key的hash相同和新的key的hash值相同 //并满足(table现有的结点的key和添加的key是同一对象 || equals返回真,就认为不能加这个k-v) if (p.hash == hash \u0026amp;\u0026amp; ((k = p.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) //如果当前的table的已有的Node是红黑树,就按照红黑树的方式处理 e = ((TreeNode\u0026lt;K,V\u0026gt;)p).putTreeVal(this, tab, hash, key, value); else { //如果找到的结点，后面是链表，就循环比较 for (int binCount = 0; ; ++binCount) {//死循环 if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); //加入后，判断当前链表的个数，是否已经到达八个，到八个，后面就调用treeifyBin方法进行红黑树的转化,不进行树化 //其中树化里面会判断是否超过64,没有就扩容 /* if (tab == null || (n = tab.length) \u0026lt; MIN_TREEIFY_CAPACITY) resize(); */ if (binCount \u0026gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } //如果在循环中相同就只是替换value if (e.hash == hash \u0026amp;\u0026amp; ((k = e.key) == key || (key != null \u0026amp;\u0026amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; //替换value afterNodeAccess(e); return oldValue; } } ++modCount; //每次加入一个都加一 if (++size \u0026gt; threshold) //判断是否需要扩容 resize(); afterNodeInsertion(evict); return null; } 结论总结 HashMap底层维护了Node类型的数组table,默认为null。\n当创建对象时,将加载因子初始化为0.75。\n当添加key-val时,通过key的哈希值得到在table的索引,然后判断索引是否有元素,如果没有元素直接加入。如果索引处有元素,则判断key值是否相同,若相同,则直接替换value;如果不相同,则会判断是树结构还是链表结构,分别进行相应的处理。如果添加发现容量不够,则会进行扩容。\n","date":"2024-10-03T16:55:42+08:00","permalink":"https://getshhi.github.io/p/hashmap%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%80%BB%E7%BB%93/","title":"HashMap的实现原理与总结"},{"content":"题目分析 力扣题目链接\n要统计二叉树的节点个数，一般是编历一遍二叉树直接统计(可以用后序遍历或者层序遍历，这里就不说了)。\n而这个是完全二叉树,我们可以根据完全二叉树的特点进行求解。\n完全二叉树的定义如下:在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面的节点都集中在该层最左边的若干位置。若最低层为第h层，则该层包含1-2h个节点。\n则可以设完全二叉树有 h 层，则其前h-1的节点都是满的，共有节点 2^(h-1) - 1 个节点。而最后一层最少有 1 个节点，最多有 2^(h-1) 个节点。因此 h 层的完全二叉树的节点个数范围为：[2^(h-1) - 1 + 1, 2^(h-1) - 1 + 2^(h-1)] = [2^(h-1), 2^h - 1]【或 [2^(h-1), 2^h) 】\n位运算 我们把每个节点编号转成二进制，可以发现以下几个规律：\n第 h 层的节点编号的二进制刚好有 h 位； 定义左子节点为 0， 右子节点为 1 。那么每一个节点编号的二进制从高位到低位刚好表示根节点到这个节点的路径。【根节点为最高位，始终为 1】即节点编号的二进制为节点路径的编码； 则可以发现第h层的节点编号一定是有h位。我们可以根据已知的节点走一遍节点路径，来查找这个节点是否存在。\n代码如下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public int countNodes(TreeNode root) { if(root == null) //如果根结点为null，直接返回0 return 0; TreeNode node = root; int leavl = 0; while(node != null){ //统计完全二叉树的层数 leavl++; node = node.left; } int min = 1 \u0026lt;\u0026lt; (leavl - 1); //最小可以有多少 int max = ( 1 \u0026lt;\u0026lt; leavl) - 1; //最大可以有多少 int ans = 0; //存储结果 while(min \u0026lt;= max){ int middle = min + ((max - min) \u0026gt;\u0026gt; 1); if(check(middle, root, leavl)){ ans = middle; min = middle + 1; //利用二分确定结果 } else{ max = middle - 1; } } return ans; } public boolean check(int middle, TreeNode root, int leavl){ int jk = 1 \u0026lt;\u0026lt; (leavl - 2); //抛去根节点(因为根节点是1) while(jk \u0026gt; 0){ if((jk \u0026amp; middle) == 0) root = root.left; //为0说明在左子树上 else root = root.right; //为1说明在右子树上 jk \u0026gt;\u0026gt;= 1; //逐层进行查找 } return root != null; //为空则说明不存在 } } 本文引自于https://leetcode.cn/problems/count-complete-tree-nodes/solutions/2456908/javapython3cer-fen-cha-zhao-wei-yun-suan-idof/\n","date":"2024-10-03T11:25:04+08:00","permalink":"https://getshhi.github.io/p/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0%E5%8A%9B%E6%89%A3/","title":"完全二叉树的节点个数(力扣)"},{"content":"docker的代理解决 这几天在docker的代理上搞了好几天，我看网上弄的教程不是太全，因此搞了好了几天才成功，特意写这个给那些有着相同的问题提供解决方案和总结自己犯过的错误。\nclash教程 首先打开clash,进入常规,然后打开局域网连接,我的端口为7890。 然后window键加r打开控制台输入ipconfig获取虚拟机的ip地址 v2rayN教程 首先打开v2rayN,进入设置，点参数设置，然后允许局域网连接(这个是在系统代理的前提上弄的)一般端口为10811 然后window键加r打开控制台输入ipconfig获取虚拟机的ip地址 最后一步(这一步都是一样的(对于这两个不同软件的代理)) docker命令 我们在docker的进程服务文件夹配置我们的代理设置，如果没有我们就新建这个文件夹：\n1 sudo mkdir /etc/systemd/system/docker.service.d 然后在docker.service.d文件夹里新建我们的代理文件proxy.conf\n1 sudo vim /etc/systemd/system/docker.service.d/proxy.conf 并把文件写如下面这个格式：\n1 2 3 [Service] Environment=\u0026#34;HTTP_PROXY=代理服务器ip:port\u0026#34; Environment=\u0026#34;HTTPS_PROXY=代理服务器ip:port\u0026#34; 保存并退出proxy.conf文件，和更改镜像源一样，重启docker，并重启daemon进程。\n1 2 sudo systemctl daemon-reload\t#重启daemon进程 sudo systemctl restart docker\t#重启docker 最后我们仍然是验证一下是否修改成功，运行\n1 docker info 在长串info信息中如果出现类似下文的内容：\n1 2 HTTP Proxy: 代理服务器ip:port HTTPS Proxy: 代理服务器ip:port 好了，可以拉取镜像了😁\n本文引自https://blog.csdn.net/Lichen0196/article/details/137355517,https://blog.csdn.net/weixin_46264846/article/details/142363390 ,https://www.jianshu.com/p/6c7abd4adc9b\n","date":"2024-10-02T11:46:05+08:00","permalink":"https://getshhi.github.io/p/%E5%9C%A8linux%E4%B8%8A%E9%83%A8%E7%BD%B2docker%E7%9A%84%E4%BB%A3%E7%90%86/","title":"在Linux上部署Docker的代理"},{"content":"java的网络编程 1.java网络编程的基本概念 IP 地址：用于标识网络中的计算机。\n端口号：用于标识计算机上的具体应用程序或进程。\nSocket（套接字）：网络通信的基本单位，通过 IP 地址和端口号标识。\n协议：网络通信的规则，如 TCP（传输控制协议）和 UDP（用户数据报协议）。\n2.java网络编程的核心类 Socket：用于创建客户端套接字。\nServerSocket：用于创建服务器套接字。\nDatagramSocket：用于创建支持 UDP 协议的套接字。\nURL：用于处理统一资源定位符。\nURLConnection：用于读取和写入 URL 引用的资源。\n3.代码实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 import java.io.*; import java.net.ServerSocket; import java.net.Socket; //服务端 public class TCPServer { public static void main(String[] args) { try (ServerSocket serverSocket = new ServerSocket(8080)) { while (true) { Socket socket = serverSocket.accept(); new ServerThread(socket).start(); //synchronized } } catch (IOException e) { e.printStackTrace(); } } } class ServerThread extends Thread { private Socket socket; public ServerThread(Socket socket){ this.socket = socket; } public void start(){ try(PrintWriter out = new PrintWriter(socket.getOutputStream(),true); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))){ String message = in.readLine(); //接受消息 out.println(\u0026#34;Hello Server~\u0026#34;); System.out.println(\u0026#34;message = \u0026#34; + message); } catch (IOException e) { e.printStackTrace(); } } } import java.io.*; import java.net.Socket; import java.net.UnknownHostException; //客户端 public class TCPClient { public static void main(String[] args) { try(Socket socket = new Socket(\u0026#34;localhost\u0026#34;,8080); PrintWriter out = new PrintWriter(socket.getOutputStream(),true); BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) { out.println(\u0026#34;Hello Server~\u0026#34;); String message = in.readLine(); System.out.println(\u0026#34;message = \u0026#34; + message); } catch (Exception e) { e.printStackTrace(); } } } 4.总结 IP地址：外卖员要送餐到的大楼（例如：腾讯大楼）。\n端口号：外卖员要到大楼里的具体房间（例如：1001）。\nSocket：外卖员通过手机（Socket）与我们通信，告知外卖已到。\n协议：我们默认使用中文对话。\n","date":"2024-09-27T12:33:05+08:00","permalink":"https://getshhi.github.io/p/javaweb/","title":"JavaWeb"}]